#include <iostream>


class Solution {
public:

    std::vector<int> convert(int num){
        std::vector<int> num_bin;
        while(num>=0){
            int this_bit = num%2;
            num = num/2;
            num_bin.push_back(this_bit);

        }
        return num_bin;
    }
    
    int count_one(std::vector<int> cut){
        std::vector<int>::iterator it_cut;
        int number_one = 0;
        for (it_cut = cut.begin();it_cut<cut.end();it_cut++){
            if (*it_cut=1){
                number_one = number_one + 1;
            }
        }
        return number_one;
    
    }
    
    int hammingDistance(int x, int y){
        int distance =0;
        std::vector<int> x_bin = convert(x);
        std::vector<int> y_bin = convert(y);
        //std::cout<<y_bin.size()<<x_bin.size()<<std::endl;
        if (y_bin.size()>x_bin.size()){ //y is larger
            std::vector<int>::iterator it_x;
            std::vector<int>::iterator it_y;
            std::vector<int> cut_x = x_bin;
            
            cut_x.erase(x_bin.end()-y_bin.size(), x_bin.end());   
            int num_one = count_one(cut_x);
            
            it_x=x_bin.begin();
            it_y=y_bin.begin();
            
            while((it_x<x_bin.end())&&(it_y<y_bin.end())){
                if(*it_x!=*it_y){
                    distance = distance +1;
                }
                
                if(it_x!=x_bin.end()&&it_y!=y_bin.end()){
                    it_x = it_x+1;
                    it_y = it_y+1;
                }
            }
    
            return distance+num_one;
        }
        else{ //x is longer
            std::vector<int>::iterator it_x;
            std::vector<int>::iterator it_y;
            std::vector<int> cut_y = y_bin;
            
            cut_y.erase(y_bin.end()-x_bin.size(), y_bin.end());   
            int num_one = count_one(cut_y);
            
            it_x=x_bin.begin();
            it_y=y_bin.begin();
            
            while((it_x<=x_bin.end())&&(it_y<=y_bin.end())){
                if(*it_x!=*it_y){
                    distance = distance +1;
                }
                if(it_x!=x_bin.end()&&it_y!=y_bin.end()){
                    it_x = it_x+1;
                    it_y = it_y+1;
                }
            }
            return distance+num_one;
        }
        
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    //while (getline(cin, line)) {
        int x = 1 //stringToInteger(line);
        //getline(cin, line);
        int y = 2 // stringToInteger(line);
        
        int ret = Solution().hammingDistance(x, y);

        string out = to_string(ret);
        cout << out << endl;
    //}
    return 0;
}


函数中间直接写
return __builtin_popcount(x^y);    
__builtin_popcount()用于计算一个 32 位无符号整数有多少个位为1
